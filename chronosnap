#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# ----------
# screenshot
# ----------
#
# $2  crop settings (geometry: WxH+X+Y)
#
function screenshot()
{
  # set output filename
  local FILENAME=$(mktemp --suffix=".png")

  # get screenshot of the entire screen and crop
  import -window     "root"             \
         -crop       "$1"               \
         -colorspace "sRGB"             \
         -depth      "8"                \
         -type       "TrueColorMatte"   \
         -define     "png:bit-depth=8"  \
         -define     "png:color-type=6" \
         -define     "png:format=png32" \
         -quality    "100"              \
         "PNG32:$FILENAME"              \
         &>"/dev/null"

  # check path and size
  if [ ! -s "$FILENAME" ] ; then

    # remove empty file
    rm -f "$FILENAME"

    # signalize trouble
    return 0

  fi

  # push filename to stdout
  echo "$FILENAME"

  # signalize success
  return 1
}

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# get crop geometry
readonly GEOMETRY=$(./chronocfg -g 2>"/dev/null")

# check return value
if [ -z "$GEOMETRY" ] ; then

  # notify user
  failmsg "no crop geometry given"

  # signalize trouble
  exit 1

fi

# get output directory
readonly TARGETDIR=$(./chronocfg -d 2>"/dev/null")

# check return value
if [ -z "$TARGETDIR" ] ; then

  # notify user
  failmsg "no output directory given"

  # signalize trouble
  exit 1

fi

# check directory
if [ ! -d "$TARGETDIR" ] ; then

  # try to create target directory
  mkdir --parents "$TARGETDIR"

  # check if target directory is still missing
  if [ ! -d "$TARGETDIR" ] ; then

    # notify user
    failmsg "unable to create directory: \"$TARGETDIR\""

    # signalize trouble
    exit 1

  fi

fi

# get icon to show via notify-send
readonly ICON=$(./chronocfg -i)

# get final filename first (timestamp)
readonly OUTFILE="$(./chrononext "$TARGETDIR").png"

# create screenshot
readonly TEMPFILE=$(screenshot "$GEOMETRY")

# check filename
if [ -z "$TEMPFILE" ] ; then

  # notify user
  failmsg "unable to create screenshot"

  # signalize trouble
  exit 1

fi

# move temporary file
mv --force "$TEMPFILE" "$OUTFILE"

# show created filename
donemsg "file created: $OUTFILE"

# check if icon is given
if [ -n "$ICON" ] ; then

  # check if file is present
  if [ -f "$ICON" ] ; then

    # show notification
    notify-send -u "normal" -i "$ICON" "file created: $(basename "$OUTFILE")"

  else

    # show plain notification
    notify-send -u "normal" "file created: $(basename "$OUTFILE")"

  fi

else

  # show plain notification
  notify-send -u "normal" "file created: $(basename "$OUTFILE")"

fi

# signalize success
exit 0

